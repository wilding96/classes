##
# CAS Server Context Configuration
# CAS服务应用上下文配置
#
#Web应用名称
server.context-path=/sso
#应用监听端口
#server.port=8443

# 以下是SSL证书相关参数。若要禁用SSL功能请注释掉以下参数，或者给以下参数设置空值。
#是否启用SSL
server.ssl.enabled=false
#SSL证书(https)保存路径
server.ssl.key-store=file:/etc/cas/thekeystore
#SSL证书密钥库
server.ssl.key-store-password=changeit
#SSL证书密码
server.ssl.key-password=changeit
server.ssl.keyAlias=passport.sso.com

#单次http请求的header头最大长度2MB=2097152/1024/1024
server.max-http-header-size=2097152
#转发http报文时是否连header头一起转发?
server.use-forward-headers=true
#连接超时时长2秒=2 * 1000
server.connection-timeout=20000
#服务器发生错误时，错误信息是否要包含堆栈信息
server.error.include-stacktrace=ALWAYS

#是否压缩http报文
server.compression.enabled=true
#要压缩的报文格式
server.compression.mime-types=application/javascript,application/json,application/xml,text/html,text/xml,text/plain
######################################################
#               以下是tomcat相关配置
######################################################
#单次http请求的header头最大长度2MB=2097152/1024/1024
server.tomcat.max-http-post-size=2097152
#存放Tomcat日志、Dump等文件的临时文件夹，默认为系统的tmp文件夹
server.tomcat.basedir=build/tomcat
#打开Tomcat的Access日志，并可以设置日志格式的方法
server.tomcat.accesslog.enabled=true
server.tomcat.accesslog.pattern=%t %a "%r" %s (%D ms)
server.tomcat.accesslog.suffix=.log
#tomcat初始会创建的线程数
server.tomcat.min-spare-threads=10
#tomcat最大线程数，默认为200
server.tomcat.max-threads=200
#设定http header使用的，用来覆盖原来port的value.
server.tomcat.port-header=X-Forwarded-Port
#设定Header包含的协议，通常是 X-Forwarded-Proto，如果remoteIpHeader有值，则将设置为RemoteIpValve.
server.tomcat.protocol-header=X-Forwarded-Proto
#设定使用SSL的header的值，默认https.
server.tomcat.protocol-header-https-value=https
#设定remote IP的header，如果remoteIpHeader有值，则设置为RemoteIpValve
server.tomcat.remote-ip-header=X-FORWARDED-FOR
#tomcat的默认URI解码字符集
server.tomcat.uri-encoding=UTF-8

#springboot的http请求编码格式
spring.http.encoding.charset=UTF-8
#是否为springboot指定http请求的编码
spring.http.encoding.enabled=true
#是否对springboot指定http请求编制编码
spring.http.encoding.force=true

#是否启用spring云总结。默认false
spring.cloud.bus.enabled=false

# 指示是否用本机属性覆盖云总线的配置
#如果想要远程配置优先级高，那么allowOverride设置为false，如果想要本地配置优先级高那么allowOverride设置为true。默认为true。
spring.cloud.config.allow-override=true

#外部配置是否可覆盖本机的配置.
spring.cloud.config.override-system-properties=false

# When allowOverride is true, external properties should take lowest priority, and not override any
# existing property sources (including local config files).
#外部源配置是否不覆盖任何源
spring.cloud.config.override-none=false

#是否动态刷新总线配置
# spring.cloud.bus.refresh.enabled=true
#是否启用环境变化事件
# spring.cloud.bus.env.enabled=true
#总线使用的队列或主题名称
# spring.cloud.bus.destination=CasCloudBus
#是否启用总线ack消息确认，若不确认成功则重发
# spring.cloud.bus.ack.enabled=true

# Globally control whether endpoints are enabled
# 全局控制是否开启endpoints节点
# or marked as sensitive to require authentication.
# 或标记sensitive为要求授权（即设置为true）
#所有终结点打开。默认为false 经验证此选项为true时，/sso/status/config能看到属性列表，否则看不到
endpoints.enabled=true
#所有终结点敏感。默认为true 
endpoints.sensitive=false
#启用/restart端点重新启动应用程序上下文。如果设置为true，则浏览器中输入网址/cas/restart按回车，就自动重新启动应用程序上下文
#注：设为true后，在/sso/status/dashboard页面会出现Reboot操作按钮
endpoints.restart.enabled=true
#启用/shutdown端点来关闭应用程序。如果设置为true，则浏览器中输入网址/cas/shutdown按回车，就自动关闭应用的端点
#注：设为true后，在/sso/status/dashboard页面会出现shutdown操作按钮
 endpoints.shutdown.enabled=false
# 启用端点的自动配置。默认为true
endpoints.autoconfig.enabled=true
# 启用端点的bean加载。默认为true
endpoints.beans.enabled=true
# 是否启用总线
endpoints.bus.enabled=true
# 是否启用配置属性
endpoints.configprops.enabled=true
#是否启用dump。
endpoints.dump.enabled=true
#是否启用环境变化事件
endpoints.env.enabled=true
#是否启用节点健康检查
endpoints.health.enabled=true
#是否启用节点功能
endpoints.features.enabled=true
#是否启用info
endpoints.info.enabled=true
#是否启动节点日志
endpoints.loggers.enabled=true
#是否启用节点日志文件
endpoints.logfile.enabled=true
#是否启用节点追踪
endpoints.trace.enabled=true
#是否启用节点文档
endpoints.docs.enabled=false
#是否启用堆栈导出
endpoints.heapdump.enabled=true

# Control the security of the management/actuator endpoints
# The 'enabled' flag below here controls the rendering of details for the health endpoint amongst other things.
#启用安全管理
management.security.enabled=true
#安全管理的角色：执行者,管理员
management.security.roles=ACTUATOR,ADMIN
#安全管理session
management.security.sessions=if_required
#安全管理上下文(应用名)
management.context-path=/status
#在每个响应中添加“X-Application-Context”HTTP头
management.add-application-context-header=false

# Define a CAS-specific "WARN" status code and its order
#管理健康状态的顺序
management.health.status.order=WARN, DOWN, OUT_OF_SERVICE, UNKNOWN, UP

# Control the security of the management/actuator endpoints
# With basic authentication, assuming Spring Security and/or relevant modules are on the classpath.
#安全基础鉴权模式：通过角色鉴权
security.basic.authorize-mode=role
#安全基础路径
security.basic.path=${server.context-path}${management.context-path}/**
#security.basic.path=/cas/status/**
#安全基础启用
# security.basic.enabled=true
#安全用户名
# security.user.name=casuser
#安全用户密码
# security.user.password=

##
# CAS Web Application Session Configuration
#
#会话超时时长，默认300
server.session.timeout=300
#是否设置Cookie没有安全标志
#如果在Cookie中设置了"HttpOnly"属性，那么通过程序(JS脚本、Applet等)将无法读取到Cookie信息，这样能有效的防止XSS攻击。
server.session.cookie.http-only=true
#设定Session的追踪模式(cookie, url, ssl)
server.session.tracking-modes=COOKIE

##
# CAS Thymeleaf View Configuration
#
#模板编码格式，默认UTF-8
spring.thymeleaf.encoding=UTF-8
#是否启用模板缓存。默认true
spring.thymeleaf.cache=true
#模板格式校验（LEGACYHTML5,HTML5,HTML)
#LEGACYHTML5——严格校验
spring.thymeleaf.mode=HTML
##Thymeleaf模板解析器在解析器链中的顺序。默认情况下，它排第一位。顺序从1开始，只有在定义了额外的TemplateResolver Bean时才需要设置这个属性。
spring.thymeleaf.template-resolver-order=100
##
# CAS Log4j Configuration
#
# logging.config=file:/etc/cas/log4j2.xml
#是否禁用log4j自动初始化？
server.context-parameters.isLog4jAutoInitializationDisabled=true

##
# CAS AspectJ Configuration
#
#是否自动启用aop切面
spring.aop.auto=true
#是否使用切面代理目标类
spring.aop.proxy-target-class=true

##
# CAS Authentication Credentials
#
cas.authn.accept.users=casuser::123456

# 数据库方式鉴权用户
#cas.authn.jdbc.query[0].url=jdbc:mysql://192.168.1.95:3306/witdn?serverTimezone=GMT&useSSL=false&useUnicode=true&characterEncoding=utf-8&allowMultiQueries=true
#cas.authn.jdbc.query[0].user=root
#cas.authn.jdbc.query[0].password=123456
#cas.authn.jdbc.query[0].sql=select * from cas_user where username=?
#cas.authn.jdbc.query[0].fieldPassword=password
#cas.authn.jdbc.query[0].driverClass=com.mysql.cj.jdbc.Driver
#cas.authn.jdbc.query[0].passwordEncoder.type=DEFAULT
#cas.authn.jdbc.query[0].passwordEncoder.characterEncoding=UTF-8
#cas.authn.jdbc.query[0].passwordEncoder.encodingAlgorithm=MD5

# 兼容 Http 协议
cas.tgc.secure=false
# Service Registry(服务注册) 是否开启json识别功能,默认为false
cas.serviceRegistry.initFromJson=true
# Json services 配置位置设定
cas.serviceRegistry.json.location=classpath:/services
#⾃动扫描服务配置，默认开启
cas.serviceRegistry.watcherEnabled=true
#120秒扫描⼀遍
cas.serviceRegistry.schedule.repeatInterval=120000
#延迟15秒开启
cas.serviceRegistry.schedule.startDelay=15000

#退出登录后允许跳转
cas.logout.followServiceRedirects=true

# ticket过期设置
#cas.ticket.st.numberOfUses=100000
#cas.ticket.st.timeToKillInSeconds=600

#cas.ticket.pt.numberOfUses=100000
#cas.ticket.pt.timeToKillInSeconds=600

#cas.ticket.tgt.maxTimeToLiveInSeconds=3000
#cas.ticket.tgt.timeToKillInSeconds=600

#跳转到指定页面需要的参数名为 service
#cas.logout.redirectParameter=service
#登出后需要跳转到的地址,如果配置该参数,service将无效。
#cas.logout.redirectUrl=https://www.witsoft.com
#在退出时是否需要 确认退出提示   true弹出确认提示框  false直接退出
#cas.logout.confirmLogout=true
#是否移除子系统的票据
cas.logout.removeDescendantTickets=true
#禁用单点登出,默认是false不禁止
#cas.slo.disabled=true
#默认异步通知客户端,清除session
cas.slo.asynchronous=true

# 密码管理 开始 email登录
#允许内置密码管理，配置了true，点击重置密码才会跳转。也就是才有这个功能
cas.authn.pm.enabled=true
#发送修改密码验证邮件
spring.mail.host=smtp.qq.com
spring.mail.port=465
#邮箱用户名
spring.mail.username=119174993@qq.com
#邮箱授权码
spring.mail.password=ltgnlcbxunfsbgfc
spring.mail.testConnection=false
spring.mail.properties.mail.smtp.auth=true
#必须ssl，差点被误导了，这里的ssl和我们的证书没有关系，只是mail内部的事情
spring.mail.properties.mail.smtp.ssl.enable=true

#重置信息 https://apereo.github.io/cas/5.1.x/installation/Configuration-Properties.html#password-management
cas.authn.pm.reset.mail.from=${spring.mail.username}
#发送邮件标题
cas.authn.pm.reset.mail.subject=SSO DEMO  重置密码
#邮件内容，必须要有%s，因为会生成一个连接并且带了token，否则无法打开链接，当然这个链接也和cas.server.prefix有关系
cas.authn.pm.reset.mail.text=打开以下链接重置您的密码（SSO-DEMO）: %s
#token失效分钟数
cas.authn.pm.reset.expirationMinutes=10
#是否开启问题回答
cas.authn.pm.reset.securityQuestionsEnabled=true
cas.authn.pm.reset.crypto.enabled=true
#新密码必须匹配表达式
cas.authn.pm.policyPattern=\\d{3,10}
# Automatically log in after successful password change
cas.authn.pm.autoLogin=false
cas.server.name=http://127.0.0.1:8080
cas.server.prefix=${cas.server.name}${server.context-path}
#安全管理页访问时要校验的IP地址。例如设置成127.0.0.1那么在浏览器中只能用127.0.0.1来访问，即使用localhost也是无权限访问的。
#这样做的用意是保护安全管理页的访问权限。此项默认是注释掉的，.+ 表示任意ip,默认值为127.0.0.1，这里需要将其打开，否则是访问不到的。
cas.adminPagesSecurity.ip=.+
# cas.adminPagesSecurity.alternateIpHeaderName=X-Forwarded-For

# If you wish to protect the admin pages via CAS itself, configure the rest.
#如果希望通过CAS本身保护管理页，请配置其余的配置项。

# cas登录页网址。默认不用开启。如果开启则要写成应用的访问路径。
cas.adminPagesSecurity.loginUrl=${cas.server.prefix}/login
#cas控制面板网址。默认不用开启。如果开启则要写成应用的访问路径。
cas.adminPagesSecurity.service=${cas.server.prefix}${management.context-path}/dashboard
#cas安全管理页的用户帐号。这里可以指向一个配置文件
cas.adminPagesSecurity.users=classpath:/user-details.properties
#cas安全管理页的角色。
#cas.adminPagesSecurity.adminRoles=ROLE_ADMIN
cas.adminPagesSecurity.adminRoles[0]=ROLE_ADMIN
#是否启用CAS安全管理页执行者节点。默认为tree
cas.adminPagesSecurity.actuatorEndpointsEnabled=true


# Each of the below endpoints can either be disabled
# 以下每个endpoints既可禁用(enabled=false),
# or can be marked as 'sensitive' (or not)
# 也可以标记为sensive即敏感项。
# to enable authentication. The global flags above control
# 来开启授权。以上所列述是全局标志控制所有内容
# everything and individual settings below act as overrides.
# 以下所述的是单独设置用作覆盖
# Control the security of the management/actuator endpoints
# The 'enabled' flag below here controls the rendering of details for the health endpoint amongst other things.

cas.monitor.endpoints.dashboard.enabled=true
cas.monitor.endpoints.dashboard.sensitive=false

cas.monitor.endpoints.discovery.enabled=true
cas.monitor.endpoints.discovery.sensitive=false

cas.monitor.endpoints.auditEvents.enabled=true
cas.monitor.endpoints.auditEvents.sensitive=false

cas.monitor.endpoints.authenticationEvents.enabled=true
cas.monitor.endpoints.authenticationEvents.sensitive=false

cas.monitor.endpoints.configurationState.enabled=true
cas.monitor.endpoints.configurationState.sensitive=false

cas.monitor.endpoints.healthCheck.enabled=true
cas.monitor.endpoints.healthCheck.sensitive=false

cas.monitor.endpoints.loggingConfig.enabled=true
cas.monitor.endpoints.loggingConfig.sensitive=false

cas.monitor.endpoints.metrics.enabled=true
cas.monitor.endpoints.metrics.sensitive=false

cas.monitor.endpoints.attributeResolution.enabled=true
cas.monitor.endpoints.attributeResolution.sensitive=false

cas.monitor.endpoints.singleSignOnReport.enabled=true
cas.monitor.endpoints.singleSignOnReport.sensitive=false

cas.monitor.endpoints.statistics.enabled=true
cas.monitor.endpoints.statistics.sensitive=false

cas.monitor.endpoints.trustedDevices.enabled=true
cas.monitor.endpoints.trustedDevices.sensitive=false

cas.monitor.endpoints.status.enabled=true
cas.monitor.endpoints.status.sensitive=false

cas.monitor.endpoints.singleSignOnStatus.enabled=true
cas.monitor.endpoints.singleSignOnStatus.sensitive=false

cas.monitor.endpoints.springWebflowReport.enabled=true
cas.monitor.endpoints.springWebflowReport.sensitive=false

cas.monitor.endpoints.registeredServicesReport.enabled=true
cas.monitor.endpoints.registeredServicesReport.sensitive=false

cas.monitor.endpoints.configurationMetadata.enabled=true
cas.monitor.endpoints.configurationMetadata.sensitive=false
